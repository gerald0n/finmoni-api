// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceMembers  WorkspaceMember[]
  createdWorkspaces Workspace[]       @relation("WorkspaceCreator")
  sentInvites       WorkspaceInvite[] @relation("InviteSender")
  receivedInvites   WorkspaceInvite[] @relation("InviteReceiver")

  @@map("users")
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String
  creator   User   @relation("WorkspaceCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  members      WorkspaceMember[]
  invites      WorkspaceInvite[]
  bankAccounts BankAccount[]

  @@map("workspaces")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@map("workspace_roles")
}

model WorkspaceMember {
  id        String        @id @default(uuid())
  role      WorkspaceRole @default(MEMBER)
  joinedAt  DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED

  @@map("invite_statuses")
}

model WorkspaceInvite {
  id         String        @id @default(uuid())
  email      String
  role       WorkspaceRole @default(MEMBER)
  status     InviteStatus  @default(PENDING)
  token      String        @unique
  message    String?
  expiresAt  DateTime
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  acceptedAt DateTime?

  senderId    String
  sender      User      @relation("InviteSender", fields: [senderId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  acceptedById String?
  acceptedBy   User?   @relation("InviteReceiver", fields: [acceptedById], references: [id], onDelete: SetNull)

  @@map("workspace_invites")
}

model BankAccount {
  id                  String   @id @default(uuid())
  name                String
  initialBalanceCents Int?
  agency              String?
  account             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("bank_accounts")
}
